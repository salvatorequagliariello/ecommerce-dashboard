// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id            String @id @default(uuid())
  name          String
  userId        String
  billboards    Billboard[] @relation("StoreToBillboard")
  categories    Category[] @relation("StoreToCategory")
  cases         Case[] @relation("StoreToCase")
  bracelets     Bracelet[] @relation("StoreToBracelet")
  movements     Movement[] @relation("StoreToMovement")
  products      Product[] @relation("StoreToProduct")
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
}

model Billboard {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label         String
  imageUrl      String
  categories    Category[]
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard @relation(fields: [billboardId], references: [id])
  products      Product[] @relation("CategoryToProduct")
  name          String
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Case {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToCase", fields: [storeId], references: [id])
  name          String
  value         String
  products      Product[]
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt


  @@index([storeId])
}

model Bracelet {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToBracelet", fields: [storeId], references: [id])
  name          String
  value         String
  products      Product[]
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

  @@index([storeId])
}

model Movement {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToMovement", fields: [storeId], references: [id])
  name          String
  value         String
  products      Product[]
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String
  category      Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name          String
  price         Decimal
  description   String
  caseDescription String
  features      String
  isFeatured    Boolean @default(false)
  isArchived    Boolean @default(false)
  caseId        String
  case          Case @relation(fields: [caseId], references: [id])
  braceletId    String
  bracelet      Bracelet @relation(fields: [braceletId], references: [id])
  movementId    String
  movement      Movement @relation(fields: [movementId], references: [id])
  images        Image[] 
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

   @@index([storeId])
   @@index([categoryId])
   @@index([caseId])
   @@index([braceletId])
   @@index([movementId])
}

model Image {
  id            String @id @default(uuid())
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url           String
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt

 @@index([productId])
}





